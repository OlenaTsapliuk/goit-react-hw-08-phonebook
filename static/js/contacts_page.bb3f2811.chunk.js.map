{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","Components/ContactForm/ContactForm.module.css","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","Components/ContactList/ContactList.module.css","Components/Filter/Filter.module.css","App.module.css","redux/selectors.js","redux/operation.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","views/Contacts.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","getContacts","state","contacts","items","getFilter","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","getFilterContacts","operations","fetchContacts","dispatch","a","fetchContactRequest","axios","data","fetchContactSuccess","fetchContactError","addContact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","ContactForm","useState","setName","setNumber","useSelector","useDispatch","handleChange","e","currentTarget","value","resetForm","onSubmit","preventDefault","find","alert","className","s","form","label","input","type","pattern","title","required","onChange","button","ContactList","useEffect","operation","list","map","onClick","onDeleteContact","shortid","Filter","event","contactActions","target","Contacts","Loader"],"mappings":"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","file":"static/js/contacts_page.bb3f2811.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2qxT4\",\"label\":\"ContactForm_label__3lQ2p\",\"input\":\"ContactForm_input__3q8qe\",\"button\":\"ContactForm_button__2uVPp\"};","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2h0kF\",\"item\":\"ContactList_item__2wrhb\",\"button\":\"ContactList_button__1xinY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1IL0I\",\"input\":\"Filter_input__1Crf1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__12cHP\"};","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getError = state => state.contacts.error;\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const getFilterContacts = contacts => {\r\n      const normalizedFilter = filter.toLowerCase();\r\n      return contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n    };\r\n\r\n    return getFilterContacts(contacts);\r\n  },\r\n);\r\n\r\n\r\n\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const contacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   const getFilterContacts = () => {\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//     return contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter)\r\n//     );\r\n//   };\r\n\r\n//   return getFilterContacts(contacts);\r\n// };","import axios from \"axios\";\r\n\r\nimport {\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError\r\n} from './action';\r\n\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n    try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n      dispatch(fetchContactError(new Error(\"Not found\")));\r\n  }\r\n};\r\n\r\nconst addContact = (name, number) => async dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nconst operations = {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\nexport default operations;","import { useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../redux/selectors';\nimport operations from '../../redux/operation';\nimport s from \"./ContactForm.module.css\";\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  \n  const onSubmit = (name, number) =>\n    dispatch(operations.addContact(name, number));\n  \n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n      \n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (contacts.find((contact) =>\n      contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts.`);\n      resetForm();\n      return;\n    } \n  \n    onSubmit(name,number)\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n    return (\n      <form onSubmit={handleSubmit} className={s.form}>\n        <label className={s.label}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleChange}\n          />\n        </label>\n        <label className={s.label}>\n          Number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n\nexport default ContactForm;\n\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n  \n// };\n\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n// const mapDispatchToProps = (dispatch) => ({\n//   onSubmit:(name,number)=>dispatch(contactActions.addContact(name, number))\n// })\n\n\n// export default connect(null,mapDispatchToProps)(ContactForm);\n\n","import shortid from \"shortid\";\nimport { useSelector,useDispatch} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactList.module.css\";\nimport operation from '../../redux/operation';\nimport { getVisibleContacts } from '../../redux/selectors';\nimport { useEffect } from 'react';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    dispatch(operation.fetchContacts());\n  }, [dispatch]);\n  \n  const onDeleteContact = (id) => dispatch(operation.deleteContact(id));\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={shortid.generate()} className={s.item}>\n          {name}: {number}\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={()=>onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n\n\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => {\n//   return {\n//     contacts: getFilterContacts(items, filter),\n//   };\n// };\n\n// const mapDispatchToProps=(dispatch) => ({\n//   onDeleteContact:id=>dispatch(contactActions.deleteContact(id))\n  \n// })\n\n// export default connect(mapStateToProps,mapDispatchToProps)(ContactList);\n","import { useSelector,useDispatch} from \"react-redux\";\nimport * as contactActions from '../../redux/action';\nimport { getFilter } from '../../redux/selectors';\nimport s from \"./Filter.module.css\";\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n\n    <label className={s.label}>\n      Find contacts by name\n      <input className={s.input} type=\"text\" value={value}\n        onChange={event => dispatch(contactActions.changeFilter(event.target.value))} />\n    </label>\n  );\n}\n\n\n// Filter.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = (state) => ({\n//   value:state.contacts.filter,\n// })\n\n// const mapDispatchToProps=(dispatch) => ({\n//   onChange: e => dispatch(contactActions.changeFilter(e.target.value)\n  \n// })\n\n// export default connect(mapStateToProps,mapDispatchToProps)(Filter);","import { getLoading } from '../redux/selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport ContactForm from '../Components/ContactForm';\r\nimport ContactList from \"../Components/ContactList\";\r\nimport Filter from \"../Components/Filter\";\r\nimport Loader from '../Components/Loader/Loader';\r\nimport s from \"../App.module.css\";\r\nimport operations from '../redux/operation';\r\n\r\n\r\nexport default function Contacts() {\r\n  const dispatch = useDispatch();\r\n const loading = useSelector(getLoading);\r\n  useEffect(() => dispatch(operations.fetchContacts()), [dispatch]);\r\n\r\n    return (\r\n      <>\r\n     <h1 className={s.title}>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2 className={s.title}>Contacts</h2>\r\n        <Filter />\r\n        {loading &&<Loader/>}\r\n            <ContactList />\r\n            </>\r\n  );\r\n}"],"sourceRoot":""}