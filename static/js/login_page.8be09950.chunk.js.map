{"version":3,"sources":["views/Views.module.css","Components/SiginGoogle.js","utils/refreshToken.js","views/Login.js"],"names":["module","exports","SigInGoogle","clientId","buttonText","onSuccess","res","console","log","profileObj","alert","name","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","localStorage","setItem","id_token","setTimeout","refreshTokenSetup","onFailure","cookiePolicy","style","marginTop","isSignedIn","Login","dispatch","useDispatch","useState","email","setEmail","password","setPassword","handleChange","target","value","className","s","pageTitle","Form","onSubmit","e","preventDefault","authOperations","logIn","autoComplete","width","Group","controlId","Label","Control","type","onChange","placeholder","Text","Check","label","Button","variant","to"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,qBAAqB,IAAM,mBAAmB,UAAY,4CAA4C,YAAc,2BAA2B,KAAO,sB,mFCuClMC,IA/Bf,WAgBE,OACE,8BACE,cAAC,cAAD,CACEC,SArBN,2EAsBMC,WAAW,QACXC,UApBY,SAAAC,GAChBC,QAAQC,IAAI,8BAA+BF,EAAIG,YAC/CC,MAAM,kCAAD,OAC+BJ,EAAIG,WAAWE,KAD9C,2DCZwB,SAAAL,GAE/B,IAAIM,EAA6D,KAA5CN,EAAIO,SAASC,YAAc,MAE1CC,EAAY,uCAAG,4BAAAC,EAAA,sEACMV,EAAIW,qBADV,OACbC,EADa,OAEnBN,EAA2D,KAA1CM,EAAWJ,YAAc,MAC1CP,QAAQC,IAAI,cAAeU,GAE3BC,aAAaC,QAAQ,YAAaF,EAAWG,UAG7CC,WAAWP,EAAcH,GARN,2CAAH,qDAYlBU,WAAWP,EAAcH,GDDvBW,CAAkBjB,IAgBdkB,UAbY,SAAAlB,GAChBC,QAAQC,IAAI,qBAAsBF,GAClCI,MAAM,0FAYFe,aAAc,qBACdC,MAAO,CAAEC,UAAW,SACpBC,YAAY,Q,sLEzBL,SAASC,IACtB,IAAMC,EAAWC,cACjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAU3B,EAAoB,EAApBA,KAAM4B,EAAc,EAAdA,MACtC,OAAQ5B,GACN,IAAK,QACH,OAAOuB,EAASK,GAClB,IAAK,WACH,OAAOH,EAAYG,GACrB,QACE,SAWN,OACE,qCACE,oBAAIC,UAAWC,IAAEC,UAAjB,wBAEA,eAACC,EAAA,EAAD,CAAMC,SAXW,SAAAC,GACnBA,EAAEC,iBACFhB,EAASiB,IAAeC,MAAM,CAAEf,QAAOE,cACvCD,EAAS,IACTE,EAAY,KAOoBa,aAAa,MAAMvB,MAAO,CAAEwB,MAAO,KAAjE,UACE,eAACP,EAAA,EAAKQ,MAAN,CAAYX,UAAU,OAAOY,UAAU,iBAAvC,UACE,cAACT,EAAA,EAAKU,MAAN,4BACA,cAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,QACL5C,KAAK,QACL4B,MAAON,EACPuB,SAAUnB,EACVoB,YAAY,gBAEd,cAACd,EAAA,EAAKe,KAAN,CAAWlB,UAAU,kBAGvB,eAACG,EAAA,EAAKQ,MAAN,CAAYX,UAAU,OAAOY,UAAU,oBAAvC,UACE,cAACT,EAAA,EAAKU,MAAN,uBACA,cAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,WACL5C,KAAK,WACL4B,MAAOJ,EACPqB,SAAUnB,EACVoB,YAAY,gBAGhB,cAACd,EAAA,EAAKQ,MAAN,CAAYX,UAAU,OAAOY,UAAU,oBAAvC,SACE,cAACT,EAAA,EAAKgB,MAAN,CAAYJ,KAAK,WAAWK,MAAM,mBAEpC,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUP,KAAK,SAA/B,uBAIF,cAAC,IAAD,CAAMQ,GAAG,YAAT,uDACA,uBACA,0FACA,cAAC,IAAD","file":"static/js/login_page.8be09950.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Views_wrapper__1VK9t\",\"title\":\"Views_title__c-_7l\",\"img\":\"Views_img__ochF8\",\"pageTitle\":\"Views_pageTitle__2Verx Views_title__c-_7l\",\"description\":\"Views_description__1WooH\",\"form\":\"Views_form__Px-eS\"};","import React from 'react';\r\n\r\nimport { GoogleLogin } from 'react-google-login';\r\n// refresh token\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\n\r\nconst clientId =\r\n  '474125835817-kcrbvh7no78e4cqkaph24orhhm65jeg1.apps.googleusercontent.com';\r\n\r\nfunction SigInGoogle() {\r\n  const onSuccess = res => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    alert(\r\n      `Logged in successfully welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`,\r\n    );\r\n    refreshTokenSetup(res);\r\n  };\r\n\r\n  const onFailure = res => {\r\n    console.log('Login failed: res:', res);\r\n    alert(\r\n      `Failed to login. 😢 Please ping this to repo owner twitter.com/sivanesh_fiz`,\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogin\r\n        clientId={clientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={'single_host_origin'}\r\n        style={{ marginTop: '100px' }}\r\n        isSignedIn={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SigInGoogle;\r\n","export const refreshTokenSetup = res => {\r\n  // Timing to renew access token\r\n  let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\r\n\r\n  const refreshToken = async () => {\r\n    const newAuthRes = await res.reloadAuthResponse();\r\n    refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\r\n    console.log('newAuthRes:', newAuthRes);\r\n    // saveUserToken(newAuthRes.access_token);  <-- save new token\r\n    localStorage.setItem('authToken', newAuthRes.id_token);\r\n\r\n    // Setup the other timer after the first one\r\n    setTimeout(refreshToken, refreshTiming);\r\n  };\r\n\r\n  // Setup first refresh timer\r\n  setTimeout(refreshToken, refreshTiming);\r\n};\r\n","import { Form, Button } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { authOperations } from '../redux/auth';\r\nimport s from './Views.module.css';\r\nimport SigInGoogle from '../Components/SiginGoogle';\r\nimport LogOutGoogle from '../Components/LogOutGoogle';\r\n\r\nexport default function Login() {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.logIn({ email, password }));\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 className={s.pageTitle}>Login page</h1>\r\n\r\n      <Form onSubmit={handleSubmit} autoComplete=\"off\" style={{ width: 450 }}>\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n            placeholder=\"Enter email\"\r\n          />\r\n          <Form.Text className=\"text-muted\"></Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n            placeholder=\"Password\"\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n          <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <Link to=\"/register\">Does not have an account? Register please</Link>\r\n      <br />\r\n      <p>Do not want to create an account? Use your Google account</p>\r\n      <SigInGoogle />\r\n      {/* <LogOutGoogle /> */}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}